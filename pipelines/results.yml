pool:
  vmImage: ubuntu-22.04

stages:
  - stage: terraform_plan
    displayName: Terraform Plan
    jobs:
      - job: terraform_plan
        displayName: Terraform Plan
        workspace:
          clean: all
        steps:
          - script: echo $(rc)
          - task: Bash@3
            displayName: terraform plan
            name: plan # needed for result later
            inputs:
              targetType: filePath
              filePath: scripts/results.sh
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              arguments: $(rc)
            env:
              TF_IN_AUTOMATION: true
              ARM_TENANT_ID: $(tenancy)
              ARM_SUBSCRIPTION_ID: $(subscription_id)
              ARM_CLIENT_ID: $(client_id)
              ARM_CLIENT_SECRET: $(sp_secret)
          - script: echo "$(plan.result)"

          - ${{ if eq(variables['plan.result'], 'unchanged') }}:
            - script: echo "norun"
          - ${{ elseif eq(variables['plan.result'], 'changed') }}:
            - script: echo "run"
          - ${{ else }}:
            - script: echo "$(plan.result)"

#          - task: CopyFiles@2
#            displayName: stage files for tf artifact
#            inputs:
#              sourceFolder: $(System.DefaultWorkingDirectory)
#              contents: |
#                terraform/**/*
#                scripts/terraform_apply.sh
#                !pipelines/**/*
#                !.gitignore
#                !**/.git/**/*
#                !terraform/.terraform/**/*
#              targetFolder: $(Build.ArtifactsStagingDirectory)
#              cleanTargetFolder: true
#
#          - task: PublishBuildArtifacts@1
#            displayName: upload tf artifact
#            inputs:
#              artifactName: terraform-plan

#  - stage: terraform_apply
#    displayName: Terraform Apply
#    jobs:
#      - deployment: terraform_apply
#        displayName: Terraform Apply
#        workspace:
#          clean: all
#        environment: $(environment)
#        strategy:
#          runOnce:
#            deploy:
#              steps:
#                - task: Bash@3
#                  displayName: terraform init
#                  inputs:
#                    targetType: filePath
#                    filePath: scripts/terraform_init.sh
#                    workingDirectory: $(System.DefaultWorkingDirectory)/terraform
#                    arguments: >
#                      -backend-config="storage_account_name=$(sa)"
#                      -backend-config="container_name=$(container)"
#                      -backend-config="key=iqsr-$(env).tfstate"
#                      -backend-config="use_azuread_auth=true"
#                      -backend-config="subscription_id=$(subscription_id)
#                      -backend-config="tenant_id=$(tenancy)
#                  env:
#                    TF_IN_AUTOMATION: true
#                    ARM_TENANT_ID: $(tenancy)
#                    ARM_CLIENT_ID: $(client_id)
#                    ARM_CLIENT_SECRET: $(sp_secret)
#
#                - task: Bash@3
#                  displayName: terraform apply
#                  inputs:
#                    targetType: filePath
#                    filePath: scripts/terraform_apply.sh
#                    workingDirectory: $(Agent.BuildDirectory)/terraform-plan/terraform
#                  env:
#                    TF_IN_AUTOMATION: true
#                    ARM_TENANT_ID: $(tenancy)
#                    ARM_SUBSCRIPTION_ID: $(subscription_id)
#                    ARM_CLIENT_ID: $(client_id)
#                    ARM_CLIENT_SECRET: $(sp_secret)
