parameters:
  - name: terraform_version
    default: 1.3.7
  - name: terraform_path
    default: /usr/local/bin
  - name: tenancy
  - name: subscription_id
  - name: client_id
  - name: client_secret
  - name: sa
  - name: container
  - name: environment

stages:
  - stage: terraform_plan
    displayName: Terraform Plan
    jobs:
      - job: terraform_plan
        displayName: Terraform Plan
        workspace:
          clean: all
        steps:
          - task: Bash@3
            displayName: install terraform
            inputs:
              targetType: filePath
              filePath: scripts/terraform_install.sh
              arguments: >
                -v ${{ parameters.terraform_version }}
                -d ${{ parameters.terraform_path }}

          - task: Bash@3
            displayName: build provider block
            inputs:
              targetType: filePath
              filePath: scripts/terraform_provider.sh
              arguments: >
                -t ${{ parameters.tenancy }}
                -s ${{ parameters.subscription_id }}
                -c ${{ parameters.client_id }}
                -o terraform/provider.tf
            env:
              SP_SECRET: ${{ parameters.client_secret }}

          - task: Bash@3
            displayName: prepend terraform path
            inputs:
              targetType: inline
              script: |
                echo "##vso[task.prependpath]${{ parameters.terraform_path }}"

          - task: Bash@3
            displayName: terraform init
            inputs:
              targetType: filePath
              filePath: scripts/terraform_init.sh
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              arguments: >
                -backend-config="storage_account_name=${{ parameters.sa }}"
                -backend-config="container_name=${{ parameters.container }}"
                -backend-config="key=iqsr-${{ parameters.environment }}.tfstate"
                -backend-config="use_azuread_auth=true"
                -backend-config="subscription_id=${{ parameters.subscription_id }}
                -backend-config="tenant_id=${{ parameters.tenancy }}
            env:
              TF_IN_AUTOMATION: true
              ARM_TENANT_ID: ${{ parameters.tenancy }}
              ARM_CLIENT_ID: ${{ parameters.client_id }}
              ARM_CLIENT_SECRET: ${{ parameters.client_secret }}

          - task: Bash@3
            displayName: terraform plan
            name: plan # needed for result later
            inputs:
              targetType: filePath
              filePath: scripts/terraform_plan.sh
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              arguments: >
                -out tfplan.tfout
                -var "env=$(environment)"
            env:
              TF_IN_AUTOMATION: true
              ARM_TENANT_ID: ${{ parameters.tenancy }}
              ARM_SUBSCRIPTION_ID: ${{ parameters.subscription_id }}
              ARM_CLIENT_ID: ${{ parameters.client_id }}
              ARM_CLIENT_SECRET: ${{ parameters.client_secret }}

          - task: CopyFiles@2
            displayName: stage files to $(Build.StagingDirectory)
            condition: and(succeeded(), eq(variables['plan.result'], 'changed'))
            inputs:
              sourceFolder: $(System.DefaultWorkingDirectory)
              contents: |
                terraform/**/*
                !scripts/**/*
                !pipelines/**/*
                !.gitignore
                !**/.git/**/*
                !terraform/.terraform/**/*
              targetFolder: $(Build.StagingDirectory)
              cleanTargetFolder: true

          - task: PublishBuildArtifacts@1
            displayName: upload tf artifact
            condition: and(succeeded(), eq(variables['plan.result'], 'changed'))
            inputs:
              artifactName: terraform-plan
